// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3BHMWCYAenCmWb8ThbnzeF
// Component: IIPSaX_3M5QL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant
import { ModeValue, useMode } from "./PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import sty from "./PlasmicFontSizes.module.css"; // plasmic-import: IIPSaX_3M5QL/css

createPlasmicElementProxy;

export type PlasmicFontSizes__VariantMembers = {};
export type PlasmicFontSizes__VariantsArgs = {};
type VariantPropType = keyof PlasmicFontSizes__VariantsArgs;
export const PlasmicFontSizes__VariantProps = new Array<VariantPropType>();

export type PlasmicFontSizes__ArgsType = {};
type ArgPropType = keyof PlasmicFontSizes__ArgsType;
export const PlasmicFontSizes__ArgProps = new Array<ArgPropType>();

export type PlasmicFontSizes__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  fontSize1?: Flex__<"div">;
  label1?: Flex__<"div">;
  value1?: Flex__<"div">;
  fontSize2?: Flex__<"div">;
  label2?: Flex__<"div">;
  value2?: Flex__<"div">;
  fontSize3?: Flex__<"div">;
  label3?: Flex__<"div">;
  value3?: Flex__<"div">;
  fontSize4?: Flex__<"div">;
  label4?: Flex__<"div">;
  value4?: Flex__<"div">;
  fontSize5?: Flex__<"div">;
  label5?: Flex__<"div">;
  value5?: Flex__<"div">;
  fontSize6?: Flex__<"div">;
  label6?: Flex__<"div">;
  value6?: Flex__<"div">;
  fontSize7?: Flex__<"div">;
  label7?: Flex__<"div">;
  value7?: Flex__<"div">;
  fontSize8?: Flex__<"div">;
  label8?: Flex__<"div">;
  value8?: Flex__<"div">;
  fontSize9?: Flex__<"div">;
  label9?: Flex__<"div">;
  value9?: Flex__<"div">;
  fontSize10?: Flex__<"div">;
  label10?: Flex__<"div">;
  value10?: Flex__<"div">;
  fontSize11?: Flex__<"div">;
  label11?: Flex__<"div">;
  value11?: Flex__<"div">;
  fontSize12?: Flex__<"div">;
  label12?: Flex__<"div">;
  value12?: Flex__<"div">;
  fontSize13?: Flex__<"div">;
  label13?: Flex__<"div">;
  value13?: Flex__<"div">;
  fontSize14?: Flex__<"div">;
  label14?: Flex__<"div">;
  value14?: Flex__<"div">;
  fontSize15?: Flex__<"div">;
  label15?: Flex__<"div">;
  value15?: Flex__<"div">;
  fontSize16?: Flex__<"div">;
  label16?: Flex__<"div">;
  value16?: Flex__<"div">;
  fontSize17?: Flex__<"div">;
  label17?: Flex__<"div">;
  value17?: Flex__<"div">;
  fontSize18?: Flex__<"div">;
  label18?: Flex__<"div">;
  value18?: Flex__<"div">;
  fontSize19?: Flex__<"div">;
  label19?: Flex__<"div">;
  value19?: Flex__<"div">;
  fontSize20?: Flex__<"div">;
  label20?: Flex__<"div">;
  value20?: Flex__<"div">;
};

export interface DefaultFontSizesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFontSizes__RenderFunc(props: {
  variants: PlasmicFontSizes__VariantsArgs;
  args: PlasmicFontSizes__ArgsType;
  overrides: PlasmicFontSizes__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsohEUf6Jd0EV8(),
    mode: useMode()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [projectcss.global_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              )
            }
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize1"}
              data-plasmic-override={overrides.fontSize1}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize1)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label1"}
                data-plasmic-override={overrides.label1}
                hasGap={true}
                className={classNames(projectcss.all, sty.label1)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uOsx
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value1"}
                data-plasmic-override={overrides.value1}
                hasGap={true}
                className={classNames(projectcss.all, sty.value1)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nmy1L
                  )}
                >
                  {"Design is where science and art break even.\n"}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize2"}
              data-plasmic-override={overrides.fontSize2}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize2)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label2"}
                data-plasmic-override={overrides.label2}
                hasGap={true}
                className={classNames(projectcss.all, sty.label2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nKrY1
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value2"}
                data-plasmic-override={overrides.value2}
                hasGap={true}
                className={classNames(projectcss.all, sty.value2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cKv5C
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize3"}
              data-plasmic-override={overrides.fontSize3}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize3)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label3"}
                data-plasmic-override={overrides.label3}
                hasGap={true}
                className={classNames(projectcss.all, sty.label3)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ioIM
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value3"}
                data-plasmic-override={overrides.value3}
                hasGap={true}
                className={classNames(projectcss.all, sty.value3)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__k5WtZ
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize4"}
              data-plasmic-override={overrides.fontSize4}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize4)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label4"}
                data-plasmic-override={overrides.label4}
                hasGap={true}
                className={classNames(projectcss.all, sty.label4)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hgDkM
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value4"}
                data-plasmic-override={overrides.value4}
                hasGap={true}
                className={classNames(projectcss.all, sty.value4)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jy4W
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize5"}
              data-plasmic-override={overrides.fontSize5}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize5)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label5"}
                data-plasmic-override={overrides.label5}
                hasGap={true}
                className={classNames(projectcss.all, sty.label5)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dqz28
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value5"}
                data-plasmic-override={overrides.value5}
                hasGap={true}
                className={classNames(projectcss.all, sty.value5)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nQg9
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize6"}
              data-plasmic-override={overrides.fontSize6}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize6)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label6"}
                data-plasmic-override={overrides.label6}
                hasGap={true}
                className={classNames(projectcss.all, sty.label6)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gmFi
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value6"}
                data-plasmic-override={overrides.value6}
                hasGap={true}
                className={classNames(projectcss.all, sty.value6)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ukBSf
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize7"}
              data-plasmic-override={overrides.fontSize7}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize7)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label7"}
                data-plasmic-override={overrides.label7}
                hasGap={true}
                className={classNames(projectcss.all, sty.label7)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p7JRz
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value7"}
                data-plasmic-override={overrides.value7}
                hasGap={true}
                className={classNames(projectcss.all, sty.value7)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___45Her
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize8"}
              data-plasmic-override={overrides.fontSize8}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize8)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label8"}
                data-plasmic-override={overrides.label8}
                hasGap={true}
                className={classNames(projectcss.all, sty.label8)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__szAoa
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value8"}
                data-plasmic-override={overrides.value8}
                hasGap={true}
                className={classNames(projectcss.all, sty.value8)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d1Aex
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize9"}
              data-plasmic-override={overrides.fontSize9}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize9)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label9"}
                data-plasmic-override={overrides.label9}
                hasGap={true}
                className={classNames(projectcss.all, sty.label9)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cqc3C
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value9"}
                data-plasmic-override={overrides.value9}
                hasGap={true}
                className={classNames(projectcss.all, sty.value9)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__skSxl
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize10"}
              data-plasmic-override={overrides.fontSize10}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize10)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label10"}
                data-plasmic-override={overrides.label10}
                hasGap={true}
                className={classNames(projectcss.all, sty.label10)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tYx9
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value10"}
                data-plasmic-override={overrides.value10}
                hasGap={true}
                className={classNames(projectcss.all, sty.value10)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__so0Rp
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize11"}
              data-plasmic-override={overrides.fontSize11}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize11)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label11"}
                data-plasmic-override={overrides.label11}
                hasGap={true}
                className={classNames(projectcss.all, sty.label11)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mw2Uz
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value11"}
                data-plasmic-override={overrides.value11}
                hasGap={true}
                className={classNames(projectcss.all, sty.value11)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__q0X7
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize12"}
              data-plasmic-override={overrides.fontSize12}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize12)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label12"}
                data-plasmic-override={overrides.label12}
                hasGap={true}
                className={classNames(projectcss.all, sty.label12)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zubrB
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value12"}
                data-plasmic-override={overrides.value12}
                hasGap={true}
                className={classNames(projectcss.all, sty.value12)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zA40
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize13"}
              data-plasmic-override={overrides.fontSize13}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize13)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label13"}
                data-plasmic-override={overrides.label13}
                hasGap={true}
                className={classNames(projectcss.all, sty.label13)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__m9VaQ
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value13"}
                data-plasmic-override={overrides.value13}
                hasGap={true}
                className={classNames(projectcss.all, sty.value13)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sXjgl
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize14"}
              data-plasmic-override={overrides.fontSize14}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize14)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label14"}
                data-plasmic-override={overrides.label14}
                hasGap={true}
                className={classNames(projectcss.all, sty.label14)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fB3OK
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value14"}
                data-plasmic-override={overrides.value14}
                hasGap={true}
                className={classNames(projectcss.all, sty.value14)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___15Oqt
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize15"}
              data-plasmic-override={overrides.fontSize15}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize15)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label15"}
                data-plasmic-override={overrides.label15}
                hasGap={true}
                className={classNames(projectcss.all, sty.label15)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__feSBz
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value15"}
                data-plasmic-override={overrides.value15}
                hasGap={true}
                className={classNames(projectcss.all, sty.value15)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rSFmJ
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize16"}
              data-plasmic-override={overrides.fontSize16}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize16)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label16"}
                data-plasmic-override={overrides.label16}
                hasGap={true}
                className={classNames(projectcss.all, sty.label16)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cbq7M
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value16"}
                data-plasmic-override={overrides.value16}
                hasGap={true}
                className={classNames(projectcss.all, sty.value16)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zpvQn
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize17"}
              data-plasmic-override={overrides.fontSize17}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize17)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label17"}
                data-plasmic-override={overrides.label17}
                hasGap={true}
                className={classNames(projectcss.all, sty.label17)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yvwyx
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value17"}
                data-plasmic-override={overrides.value17}
                hasGap={true}
                className={classNames(projectcss.all, sty.value17)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aRezL
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize18"}
              data-plasmic-override={overrides.fontSize18}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize18)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label18"}
                data-plasmic-override={overrides.label18}
                hasGap={true}
                className={classNames(projectcss.all, sty.label18)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dokGn
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value18"}
                data-plasmic-override={overrides.value18}
                hasGap={true}
                className={classNames(projectcss.all, sty.value18)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jGzDp
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize19"}
              data-plasmic-override={overrides.fontSize19}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize19)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label19"}
                data-plasmic-override={overrides.label19}
                hasGap={true}
                className={classNames(projectcss.all, sty.label19)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vBRt2
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value19"}
                data-plasmic-override={overrides.value19}
                hasGap={true}
                className={classNames(projectcss.all, sty.value19)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vDlb
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"fontSize20"}
              data-plasmic-override={overrides.fontSize20}
              hasGap={true}
              className={classNames(projectcss.all, sty.fontSize20)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"label20"}
                data-plasmic-override={overrides.label20}
                hasGap={true}
                className={classNames(projectcss.all, sty.label20)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__whqYd
                  )}
                >
                  {"Enter some text"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"value20"}
                data-plasmic-override={overrides.value20}
                hasGap={true}
                className={classNames(projectcss.all, sty.value20)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hdwyG
                  )}
                >
                  {"Design is where science and art break even."}
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "fontSize1",
    "label1",
    "value1",
    "fontSize2",
    "label2",
    "value2",
    "fontSize3",
    "label3",
    "value3",
    "fontSize4",
    "label4",
    "value4",
    "fontSize5",
    "label5",
    "value5",
    "fontSize6",
    "label6",
    "value6",
    "fontSize7",
    "label7",
    "value7",
    "fontSize8",
    "label8",
    "value8",
    "fontSize9",
    "label9",
    "value9",
    "fontSize10",
    "label10",
    "value10",
    "fontSize11",
    "label11",
    "value11",
    "fontSize12",
    "label12",
    "value12",
    "fontSize13",
    "label13",
    "value13",
    "fontSize14",
    "label14",
    "value14",
    "fontSize15",
    "label15",
    "value15",
    "fontSize16",
    "label16",
    "value16",
    "fontSize17",
    "label17",
    "value17",
    "fontSize18",
    "label18",
    "value18",
    "fontSize19",
    "label19",
    "value19",
    "fontSize20",
    "label20",
    "value20"
  ],
  freeBox: [
    "freeBox",
    "fontSize1",
    "label1",
    "value1",
    "fontSize2",
    "label2",
    "value2",
    "fontSize3",
    "label3",
    "value3",
    "fontSize4",
    "label4",
    "value4",
    "fontSize5",
    "label5",
    "value5",
    "fontSize6",
    "label6",
    "value6",
    "fontSize7",
    "label7",
    "value7",
    "fontSize8",
    "label8",
    "value8",
    "fontSize9",
    "label9",
    "value9",
    "fontSize10",
    "label10",
    "value10",
    "fontSize11",
    "label11",
    "value11",
    "fontSize12",
    "label12",
    "value12",
    "fontSize13",
    "label13",
    "value13",
    "fontSize14",
    "label14",
    "value14",
    "fontSize15",
    "label15",
    "value15",
    "fontSize16",
    "label16",
    "value16",
    "fontSize17",
    "label17",
    "value17",
    "fontSize18",
    "label18",
    "value18",
    "fontSize19",
    "label19",
    "value19",
    "fontSize20",
    "label20",
    "value20"
  ],
  fontSize1: ["fontSize1", "label1", "value1"],
  label1: ["label1"],
  value1: ["value1"],
  fontSize2: ["fontSize2", "label2", "value2"],
  label2: ["label2"],
  value2: ["value2"],
  fontSize3: ["fontSize3", "label3", "value3"],
  label3: ["label3"],
  value3: ["value3"],
  fontSize4: ["fontSize4", "label4", "value4"],
  label4: ["label4"],
  value4: ["value4"],
  fontSize5: ["fontSize5", "label5", "value5"],
  label5: ["label5"],
  value5: ["value5"],
  fontSize6: ["fontSize6", "label6", "value6"],
  label6: ["label6"],
  value6: ["value6"],
  fontSize7: ["fontSize7", "label7", "value7"],
  label7: ["label7"],
  value7: ["value7"],
  fontSize8: ["fontSize8", "label8", "value8"],
  label8: ["label8"],
  value8: ["value8"],
  fontSize9: ["fontSize9", "label9", "value9"],
  label9: ["label9"],
  value9: ["value9"],
  fontSize10: ["fontSize10", "label10", "value10"],
  label10: ["label10"],
  value10: ["value10"],
  fontSize11: ["fontSize11", "label11", "value11"],
  label11: ["label11"],
  value11: ["value11"],
  fontSize12: ["fontSize12", "label12", "value12"],
  label12: ["label12"],
  value12: ["value12"],
  fontSize13: ["fontSize13", "label13", "value13"],
  label13: ["label13"],
  value13: ["value13"],
  fontSize14: ["fontSize14", "label14", "value14"],
  label14: ["label14"],
  value14: ["value14"],
  fontSize15: ["fontSize15", "label15", "value15"],
  label15: ["label15"],
  value15: ["value15"],
  fontSize16: ["fontSize16", "label16", "value16"],
  label16: ["label16"],
  value16: ["value16"],
  fontSize17: ["fontSize17", "label17", "value17"],
  label17: ["label17"],
  value17: ["value17"],
  fontSize18: ["fontSize18", "label18", "value18"],
  label18: ["label18"],
  value18: ["value18"],
  fontSize19: ["fontSize19", "label19", "value19"],
  label19: ["label19"],
  value19: ["value19"],
  fontSize20: ["fontSize20", "label20", "value20"],
  label20: ["label20"],
  value20: ["value20"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  fontSize1: "div";
  label1: "div";
  value1: "div";
  fontSize2: "div";
  label2: "div";
  value2: "div";
  fontSize3: "div";
  label3: "div";
  value3: "div";
  fontSize4: "div";
  label4: "div";
  value4: "div";
  fontSize5: "div";
  label5: "div";
  value5: "div";
  fontSize6: "div";
  label6: "div";
  value6: "div";
  fontSize7: "div";
  label7: "div";
  value7: "div";
  fontSize8: "div";
  label8: "div";
  value8: "div";
  fontSize9: "div";
  label9: "div";
  value9: "div";
  fontSize10: "div";
  label10: "div";
  value10: "div";
  fontSize11: "div";
  label11: "div";
  value11: "div";
  fontSize12: "div";
  label12: "div";
  value12: "div";
  fontSize13: "div";
  label13: "div";
  value13: "div";
  fontSize14: "div";
  label14: "div";
  value14: "div";
  fontSize15: "div";
  label15: "div";
  value15: "div";
  fontSize16: "div";
  label16: "div";
  value16: "div";
  fontSize17: "div";
  label17: "div";
  value17: "div";
  fontSize18: "div";
  label18: "div";
  value18: "div";
  fontSize19: "div";
  label19: "div";
  value19: "div";
  fontSize20: "div";
  label20: "div";
  value20: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFontSizes__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFontSizes__VariantsArgs;
    args?: PlasmicFontSizes__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFontSizes__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFontSizes__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFontSizes__ArgProps,
          internalVariantPropNames: PlasmicFontSizes__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFontSizes__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFontSizes";
  } else {
    func.displayName = `PlasmicFontSizes.${nodeName}`;
  }
  return func;
}

export const PlasmicFontSizes = Object.assign(
  // Top-level PlasmicFontSizes renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    fontSize1: makeNodeComponent("fontSize1"),
    label1: makeNodeComponent("label1"),
    value1: makeNodeComponent("value1"),
    fontSize2: makeNodeComponent("fontSize2"),
    label2: makeNodeComponent("label2"),
    value2: makeNodeComponent("value2"),
    fontSize3: makeNodeComponent("fontSize3"),
    label3: makeNodeComponent("label3"),
    value3: makeNodeComponent("value3"),
    fontSize4: makeNodeComponent("fontSize4"),
    label4: makeNodeComponent("label4"),
    value4: makeNodeComponent("value4"),
    fontSize5: makeNodeComponent("fontSize5"),
    label5: makeNodeComponent("label5"),
    value5: makeNodeComponent("value5"),
    fontSize6: makeNodeComponent("fontSize6"),
    label6: makeNodeComponent("label6"),
    value6: makeNodeComponent("value6"),
    fontSize7: makeNodeComponent("fontSize7"),
    label7: makeNodeComponent("label7"),
    value7: makeNodeComponent("value7"),
    fontSize8: makeNodeComponent("fontSize8"),
    label8: makeNodeComponent("label8"),
    value8: makeNodeComponent("value8"),
    fontSize9: makeNodeComponent("fontSize9"),
    label9: makeNodeComponent("label9"),
    value9: makeNodeComponent("value9"),
    fontSize10: makeNodeComponent("fontSize10"),
    label10: makeNodeComponent("label10"),
    value10: makeNodeComponent("value10"),
    fontSize11: makeNodeComponent("fontSize11"),
    label11: makeNodeComponent("label11"),
    value11: makeNodeComponent("value11"),
    fontSize12: makeNodeComponent("fontSize12"),
    label12: makeNodeComponent("label12"),
    value12: makeNodeComponent("value12"),
    fontSize13: makeNodeComponent("fontSize13"),
    label13: makeNodeComponent("label13"),
    value13: makeNodeComponent("value13"),
    fontSize14: makeNodeComponent("fontSize14"),
    label14: makeNodeComponent("label14"),
    value14: makeNodeComponent("value14"),
    fontSize15: makeNodeComponent("fontSize15"),
    label15: makeNodeComponent("label15"),
    value15: makeNodeComponent("value15"),
    fontSize16: makeNodeComponent("fontSize16"),
    label16: makeNodeComponent("label16"),
    value16: makeNodeComponent("value16"),
    fontSize17: makeNodeComponent("fontSize17"),
    label17: makeNodeComponent("label17"),
    value17: makeNodeComponent("value17"),
    fontSize18: makeNodeComponent("fontSize18"),
    label18: makeNodeComponent("label18"),
    value18: makeNodeComponent("value18"),
    fontSize19: makeNodeComponent("fontSize19"),
    label19: makeNodeComponent("label19"),
    value19: makeNodeComponent("value19"),
    fontSize20: makeNodeComponent("fontSize20"),
    label20: makeNodeComponent("label20"),
    value20: makeNodeComponent("value20"),

    // Metadata about props expected for PlasmicFontSizes
    internalVariantProps: PlasmicFontSizes__VariantProps,
    internalArgProps: PlasmicFontSizes__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFontSizes;
/* prettier-ignore-end */
